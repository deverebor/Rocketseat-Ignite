Aula 01 - Criando estrutura do projeto

Bibliotecas instaladas nessa aula para o projeto:
react;
react-dom;


Primeira coisa que se faz em qualquer projeto que se utiliza JavaScript, sempre se inicializa o repositório criando o package.json existem algumas formas de se fazer isso são elas:

yarn init -y

ou 

npm init -y

O package.json é onde se armazena as informações principais do projeto, ou seja dependências de terceiros, nome do projeto, versão, licença e etc. 

Estrutura de pastas da aplicação:

src => Onde fica todo o código da aplicação.
puclic => Onde fica arquivos e assets que são acessados por meios externos da aplicação.

-------------------------------------------------------------------------------------------
Aula 02 - Configuração do Babel

Babel serve para converter o código para que todos os browsers e todo o ambiente da aplicação consiga entender todos os códigos. 

Para instalar o babel na sua aplicação react se utiliza o seguinte comando:

yarn add @babel/core @babel/cli @babel/preset-env -D 

O -D é para definir como dependência de desenvolvimento e o contúdo não estará disponível quando a aplicação for ao ar. 

Após a instalação deve-se criar um arquivo chamado => babel.config.js onde será exportado as configurações do babel.

Para traduzir um arquivo se utiliza o seguinte comando:

yarn babel src/index.js -o dist/bundle.js => conversão padrão de um arquivo js para babel.

Primeiro se diz onde está o arquivo o "-o" significa o que será gerado na saída e por fim o diretório e nome do arquivo traduzido.

Para o Babel entender a arquitetura de código React é necessário instalar mais 1 biblioteca:

yarn add @babel/preset-react -D 

Após se importa dentro do arquivo do babel.config.js

Com isso o Babel agora vai entender toda as importações de html dentro do js.
O babel configurado ficará da seguinte maneira:

module.exports = {
  presets: [
    '@babel/preset-env',
    '@babel/preset-react'
  ]
}
-------------------------------------------------------------------------------------------
Aula 03 - Configuração do Webpack

O Webpack manuseia o tratamento dos arquivos na minha aplicação para interpretação do browser.
Para instalar o Webpack se utiliza o seguinte comando:

yarn add webpack webpack-cli webpack-dev-server -D

para configurar se cria primeiro um arquivo no diretório raiz da aplicação:

webpack.config.js

dentro da sua configuração, se define o arquivo principal da aplicação dentro do *entry:* onde se configura o arquivo de entrada.

*Um jeito mais organizado de se puxar diretórios para configuração de arquivos é utilizando o path() já que de OS para OS as navegações entre arquivos são distintas.*

Após configurar o entry se configura o output, que será o arquivo de saída do resultado. 

Também é necessário configurar o module:{} que será o local onde ficará os arquivos que passaram pela filtragem e convertidos para as devidas extensões, dentro do modules se cria o rules:[] um array odne será armazenado as regras de verificação dos arquivos utilizando o test: que recebe uma expressão regular para fazer a verificação do arquivo. 

Sempre que eu quiser definir que irá terminar com algo se usa o *$* na configuração do test.

Para fazer a integração do babel e o webpack se utiliza uma biblioteca:

yarn add babel-loader -D

O webpack configurado ficará da seguinte maneira:

const path = require('path')

module.exports = {
  entry: path.resolve(__dirname, 'src', 'index.jsx'),
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js'
  },
  resolve: {
    extensions: ['.js', '.jsx']
  },
  module: {
    rules: [
      {
        test: /\.jsx$/,
        exclude: /node_modules/,
        use: 'babel-loader'
      }
    ],
  }
}