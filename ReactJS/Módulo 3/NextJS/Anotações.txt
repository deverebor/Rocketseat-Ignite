Fundamentos do Next.js - 3.1
Aula 01 - Fluxo da aplicação
O projeto que será construido no modulo é um site para assinar newsletter. 
Link do layout do figma: https://www.figma.com/file/3pxSUIP7oueM2t0LVtuYox/ig.news-(Copy)
Link da documentação do NextJS: https://nextjs.org/docs/getting-started

Ferramentas que serão utilizadas na construção do site:

Stripe: API para pagamentos
FaunaDB: Banco de dados para aplicações serverless (Outra opção seria o DynamoDB da AWS)
Prismic CMS: Content Management System -> Painel de administração para cadastrar informações e servir uma API. 
OAuth(Autenticação): GitHub.

----------------------------------------------------------------------------------
Aula 02 - Fundamentos do Next.js

O NextJS utiliza SSR(Server Side Rendering) -> Faz com que o contúdo da aplicação seja carregado pelo lado do back-end assim melhorando uma serie de fatores inclusive o SO da aplicação. O modelo tradicional de SPA(Single Page Application) carrega o conteúdo todo no front-end, então caso haja algum problema de indexação a página não será carregada por completo. 

----------------------------------------------------------------------------------
Aula 03 - Criando estrutura Next.js
Para criar uma aplicação com o next usa-se:

yarn create next-app ignews -> nome da aplicação

A pasta pages só pode estar em dois lugares na estrutura de uma aplicação react: Raiz do projeto ou dentro do SRC

O arquivo chamado index é o principal da aplicação e não é necessário criar uma rota default para ela. Para cada arquivo criado na pasta pages o next entende como uma rota, exceto o _app e o _documents.

----------------------------------------------------------------------------------
Aula 04 - Adicionando TypeScript
Para adicionar o typescript ao projeto next usa-se o seguinte comando:

yarn add typescript @types/react @types/node -D

Quando se adiciona o typescript a um projeto next é uma boa prática importar as propriedades para o _app.tsx 

import { AppProps } from 'next/app'

function MyApp({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />
}

export default MyApp

Dessa forma as propriedades terão o seu valor tipado.

----------------------------------------------------------------------------------
Aula 05 - Estilização com SASS
No nextjs a estilização global fica no _app.jsx para evitar conflitos de estilizações futuras, como surgimento de novas classes e também a construção da mesma.

O styledcomponets é muito bom porém não é necessário se utilizar em todo projeto, pode-se alternar entre ele e o sass. O styledcomponets usa-se de muitos recursos e também uma complexidade maior, dependendo do projeto pode-se utilizar o sass ou qualquer outro pre processador de css.

Todo arquivo que possui um 'home*.module.*css' ele é um css scoped usa-se um css modules dentro do next.js
Quando se utiliza css modules não se faz estilização em tags diretas e sim em classes ou id's.

----------------------------------------------------------------------------------
Aula 06 - Configurando fonte externa
O _app.tsx vai SEMPRE está por volta de toda a aplicação, ou seja, sempre envolverá todas as páginas da aplicação. Toda vez que o usuário mudar de página o _app.tsx será recarregado.

Caso seja necessário carregar apenas UMA ÚNICA vez qualquer elemento, por exemplo uma font externa, se utiliza o _document.jsx esse arquivo funciona da mesma maneira que o index.html do create-react-app. 

O NextJS ainda não tem um suporte tão bom para se utilizar o _docuemnt.jsx como função então exporta-se ele como uma classe:

import Document from 'next/document'

export default **class MyDocument** extends Document {
  render() {
    return(
      
    )
  }
}

Todos as tags htmls utlizadas no _document são transformadas em components html que veem por padrão no NextJS:

import Document, **{ Html, Head, Main, NextScript }** from 'next/document'

export default class MyDocument extends Document {
  render() {
    return(
      *<Html>*
        *<Head>*
          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
          <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700;900&display=swap" rel="stylesheet" /> 

        *</Head>*
        <body>
          <Main /> -> onde será carregado o conteúdo da página.
          <NextScript /> -> onde fica armazenado os scripts js para funcionalidade da aplicação.
        </body>
      *</Html>*
    )
  }
}

----------------------------------------------------------------------------------
Aula 07 - Title dinâmico por página

[index.tsx]
<Head>
  <title>Início | ig.news</title>
</Head>

Todo conteúdo colocado dentro de um <Head> é linkado com o head do _document.tsx para criar os títulos dinâmicos para cada página, caso seja colocado dentro do _document será um titulo universal e todas as páginas terão o mesmo.

----------------------------------------------------------------------------------
Aula 08 - Estilos globais do app

Quando se utiliza o .module.scss você está definindo um estilo somente para aquele componente, já quando se utiliza somente a extensão é um estilo global.

color: inherit; -> assume a cor do elemento que está por volta dele.

o scss não pode-se importar dentro do _document.

Para definir o rem da página pega-se o valor padrão do tamanho das fonts (16px) e multiplica pela percentagem necessária, EX:

16 x 93,75% =
16 x 0,9375 = 15

----------------------------------------------------------------------------------
Aula 09 - Componente: Header
No next não se importa as imagens como é normalmente no create-react-app importa-se assim:

<img src="/images/logo.svg" alt="" />

TODAS AS IMAGENS DEVE FICAR NO PUBLIC.

::after -> estilizar algo antes de fechar a tags
::before -> estilizar algo no começo da tag

dentro do after ou before é necessário ter um content mesmo que estejá vazio.

----------------------------------------------------------------------------------
Aula 09 - Componente: SignInButton
Toda vez que um componente muda de estado no react ele é renderizado novamente.

Para pegar alguns icones pode-se instalar o pacote react-icons.

yarn add react-icons

----------------------------------------------------------------------------------
Aula 09 - Página Home

height: calc(100vh - 5rem); -> Altura total da tela - o fontsize

----------------------------------------------------------------------------------
Aula 09 - Componente: SubscribeButton

O contexto sempre define o espaçamento dos elementos dentro dele.

----------------------------------------------------------------------------------
Aula 10 - Configurando Stripe
A chave publica do stripe é para fazer requisições de dados no front-end. 
A chave secreta é  a chave que da o controle de admin em toda a aplicação.

.env.local = rodando projeto local.
.env.production = rodando em produção.
.env.development = rodando em desenvolvimento.
.env.test = rodando em teste.

Documentação do NextJS sobre variáveis locais: https://nextjs.org/docs/basic-features/environment-variables

----------------------------------------------------------------------------------
Aula 10 - Consumindo API do Stripe (SSR)
para adicionar o stripe SDK (SoftwareDevelopmentKit) na aplicação usa-se:

yarn add stripe 

Documentação da API do stripe: https://stripe.com/docs/api
Layout shift= mudança percetível ao usuário 

Para exportar o conteúdo da requisição para um componente é necessário armazenar os valores em uma página já que O SSR só funciona em páginas do next e não em componentes. Para isso cria-se uma constante que armazenará as propriedades do server O NOME SÓ PODE SER getServerSideProps NÃO PODE SER OUTRO:

export const getServerSideProps = async () => {
  
}

Sempre será uma async fucntion porque retornará uma promessa que será utilizada. 
Tudo isso se faz para poder importar uma tipagem do next para essa função que é o notFound(boleano), props e redirect:

import {GetServerSideProps} from 'next'

export const getServerSideProps: *GetServerSideProps* = async () => {

}

Tudo que é retornado dentro do getServerSideProps é passado como propriedade para a Home(props) fazendo com que tenha um fluxo de troca de dados. 
Os comandos rodados dentro do getServerSideProps é somente NO LADO do SERVIDOR ou seja se rodarmos um console.log por exemplo ele aparecerá no lado do servidor, ou seja no nosso terminal porque todo o conteúdo está no SERVIDOR NODE.

Após criar a pasta services dentro do src, cria-se um stripe.ts onde coloca-se as configurações do stripe, um exemplo "default":

import Stripe from 'stripe'
import { version } from '../../package.json'

export const stripe = new Stripe(
  process.env.STRIPE_API_KEY, -> importação da chave local.
  {
    apiVersion: '2020-08-27', -> versão da api
    appInfo: { -> informação da aplicação
      name: 'Ignews', -> nome da aplicação;
      version -> versão importada do package.json;
    },
  }
)

A configuração do stripe dentro do Home() ficaria assim por "default": 

export const getServerSideProps: GetServerSideProps = async () => {
  const price = await stripe.prices.retrieve('price_1JJybFLKxNvsNVSHX1Y71OMK', {
    expand: ['product'] -> Pega toda a descrição do produto.
  })

  const product = {
    priceId: price.id, -> id do produto que será utilizado.
    amount: new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(price.unit_amount / 100), -> Convertendo para USD e colocando em cents, é sempre bom utilizar centavos no servidor para conseguir trabalhar melhor com o preço.

  }

  return {
    props: {
      product, -> retornando o produto para utilização das propriedades na função Home()
    }
  }
}

----------------------------------------------------------------------------------
Aula 10 - Static Site Generation (SSG)
No caso dessa aplicação já que na HOME o preço vai ser o mesmo e não receberá alteração pode-se utilizar o SSG para cuidar da renderiação disso. Com o SSG o next salva uma cópia estática da aplicação e não terá que recarregar toda vez e fazer um contato com o servidor para pegar as informações do preço. Só deve-se utilizar o SSG em páginas que o conteúdo vai ser o mesmo por tempo indeterminado.

export const getStaticProps: GetStaticProps = async () => {
  const price = await stripe.prices.retrieve('price_1JJybFLKxNvsNVSHX1Y71OMK')

  const product = {
    priceId: price.id,
    amount: new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(price.unit_amount / 100),

  }

  return {
    props: {
      product,
    },
    revalidate: 60 * 60 * 24, -> Quanto tempo em segundos a página não será revalidada. 60 -> 1 min, 60 -> 1hr, 24 -> 1 dia = cada 1 dia.
  }
}


----------------------------------------------------------------------------------
Back-end no front-end - 3.2
Aula 11 - API routes no Next.js

Toda vez que se cria uma página dentro do next ele cria automaticamente uma rota.
A partir do momento que o código do back-end é executado no front-end nunca será seguro, pois ela se torna pública.

Uma função de retorno para a api que conecta o ban-end sempre receberar um request e um response como parametro da função.